import { TEHttpMethods, TEHttpResponseCategory, TEHttpResponseCode } from '@CORTypes/enums/http'

export const httpResponseCode = {
  continue: 100,
  switching_protocols: 101,
  processing: 102,
  early_hints: 103,

  ok: 200,
  created: 201,
  accepted: 202,
  non_authoritative_information: 203,
  no_content: 204,
  reset_content: 205,
  partial_content: 206,
  multi_status: 207,
  already_reported: 208,
  im_used: 226,

  multiple_choices: 300,
  moved_permanently: 301,
  found: 302,
  see_other: 303,
  not_modified: 304,
  use_proxy: 305,
  switch_proxy: 306,
  temporary_redirect: 307,
  permanent_redirect: 308,

  bad_request: 400,
  unauthorized: 401,
  payment_required: 402,
  forbidden: 403,
  not_found: 404,
  method_not_allowed: 405,
  not_acceptable: 406,
  proxy_authentication_required: 407,
  request_timeout: 408,
  conflict: 409,
  gone: 410,
  length_required: 411,
  precondition_failed: 412,
  payload_too_large: 413,
  uri_too_long: 414,
  unsupported_media_type: 415,
  range_not_satisfiable: 416,
  expectation_failed: 417,
  im_a_teapot: 418,
  misdirected_request: 421,
  unprocessable_entity: 422,
  locked: 423,
  failed_dependency: 424,
  too_early: 425,
  upgrade_required: 426,
  precondition_required: 428,
  too_many_requests: 429,
  request_header_fields_too_large: 431,
  unavailable_for_legal_reasons: 451,

  internal_server_error: 500,
  not_implemented: 501,
  bad_gateway: 502,
  service_unavailable: 503,
  gateway_timeout: 504,
  http_version_not_supported: 505,
  variant_also_negotiates: 506,
  insufficient_storage: 507,
  loop_detected: 508,
  not_extended: 510,
  network_authentication_required: 511,

  invalid_status_code: 0,
} as const satisfies Record<TEHttpResponseCode, number>

export const httpResponseCategory = {
  information: 'informativo',
  success: 'sucesso',
  redirection: 'redirecionamento',
  client_error: 'erro do cliente',
  server_error: 'erro do servidor',
} as const satisfies Record<TEHttpResponseCategory, string>

export const httpResponseCategoryCode = {
  '1': 'information',
  '2': 'success',
  '3': 'redirection',
  '4': 'client_error',
  '5': 'server_error',
} as const satisfies Record<string, TEHttpResponseCategory>

export const httpCodeDescription = {
  continue: 'o cliente pode continuar sua requisição.',
  switching_protocols: 'o servidor aceitou mudar de protocolo.',
  processing: 'processamento contínuo.',
  early_hints: 'retorna cabeçalhos antecipadamente.',

  ok: 'requisição bem-sucedida.',
  created: 'recurso criado com sucesso.',
  accepted: 'requisição aceita para processamento.',
  non_authoritative_information: 'informação não autoritativa.',
  no_content: 'requisição sem retorno de conteúdo.',
  reset_content: 'reset do conteúdo visualizado pelo usuário.',
  partial_content: 'retorno parcial de conteúdo.',
  multi_status: 'retorna múltiplos status.',
  already_reported: 'já reportado previamente.',
  im_used: 'recurso usado de forma independente.',

  multiple_choices: 'múltiplas opções disponíveis.',
  moved_permanently: 'recurso movido permanentemente.',
  found: 'recurso encontrado temporariamente.',
  see_other: 'recurso acessível em outra URL.',
  not_modified: 'recurso não modificado.',
  use_proxy: 'acesso ao recurso deve ser feito via proxy.',
  switch_proxy: 'proxy deve ser alterado (não utilizado).',
  temporary_redirect: 'redirecionamento temporário.',
  permanent_redirect: 'redirecionamento permanente.',

  bad_request: 'requisição malformada.',
  unauthorized: 'não autorizado (requer autenticação).',
  payment_required: 'requisição de pagamento (uso futuro).',
  forbidden: 'proibido acessar o recurso.',
  not_found: 'recurso não encontrado.',
  method_not_allowed: 'método HTTP não permitido.',
  not_acceptable: 'recurso incompatível com cabeçalhos aceitos.',
  proxy_authentication_required: 'requer autenticação no proxy.',
  request_timeout: 'tempo limite para a requisição.',
  conflict: 'conflito na requisição.',
  gone: 'recurso removido permanentemente.',
  length_required: 'tamanho do conteúdo não informado.',
  precondition_failed: 'pré-condição falhou.',
  payload_too_large: 'conteúdo enviado muito grande.',
  uri_too_long: 'URI muito longa.',
  unsupported_media_type: 'tipo de mídia não suportado.',
  range_not_satisfiable: 'faixa solicitada inválida.',
  expectation_failed: 'falha na expectativa.',
  im_a_teapot: 'páscoa da RFC 2324: "Sou um bule de chá".',
  misdirected_request: 'requisição incorreta para o servidor.',
  unprocessable_entity: 'entidade não processável.',
  locked: 'recurso bloqueado.',
  failed_dependency: 'dependência falhou.',
  too_early: 'requisição muito cedo.',
  upgrade_required: 'atualização necessária.',
  precondition_required: 'pré-condição obrigatória.',
  too_many_requests: 'muitas requisições feitas pelo cliente.',
  request_header_fields_too_large: 'cabeçalhos da requisição muito grandes.',
  unavailable_for_legal_reasons: 'recurso indisponível por razões legais.',

  invalid_status_code: 'código de status inválido.',
  internal_server_error: 'erro interno do servidor.',
  not_implemented: 'funcionalidade não implementada.',
  bad_gateway: 'gateway inválido.',
  service_unavailable: 'serviço indisponível.',
  gateway_timeout: 'tempo limite do gateway.',
  http_version_not_supported: 'versão HTTP não suportada.',
  variant_also_negotiates: 'variante também negocia.',
  insufficient_storage: 'armazenamento insuficiente (WebDAV).',
  loop_detected: 'loop detectado (WebDAV).',
  not_extended: 'extensão necessária.',
  network_authentication_required: 'autenticação de rede obrigatória.',
} as const satisfies Record<TEHttpResponseCode, string>

export const httpMethodPath = {
  post: '/',
  get: '/:id',
  put: '/:id',
  patch: '/:id',
  delete: '/:id',
} as const satisfies Record<TEHttpMethods, string>

export const httpMethodOperationId = {
  get: 'get',
  put: 'edit',
  post: 'create',
  patch: 'update',
  delete: 'remove',
} as const satisfies Record<TEHttpMethods, string>
